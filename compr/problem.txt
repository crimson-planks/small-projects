I have a black and white 1-bit-color image, and I split it up into 8*8 chunks
Then I need to find 256 8*8 blocks that best represent that the image
minimize loss

question 0: an array of 3 integers, and find 1 integer n that minimizes the standard deviation between each inputted number and n
[a,b,c]
S = ((n-a)^2+(n-b)^2+(n-c)^2)/3
find n such that S is the global minimum
S = (n^2-2an+a^2+n^2-2bn+b^2+n^2-2cn+c^2)/3
S = (3n^2-2(a+b+c)n+a^2+b^2+c^2)/3
S = n^2 - (2/3)(a+b+c)n + (1/3)(a^2+b^2+c^2)
n = (a+b+c)/3
# the arithmetic mean of a,b,c

question 1: an array of 3 integers (sorted), and find 2 integers n,m (n < m) that minimizes the sum of the smaller of the standard deviations between each inputted number and n,m
# l is the loss function for a single original number
l(a) = min((n-a)^2,(m-a)^2) =
⎧ (n-a)^2 ((n-a)^2 < (m-a)^2)
⎨
⎩ (m-a)^2 ((n-a)^2 >= (m-a)^2)

(n-a)^2 - (m-a)^2 = (a-n)^2 - (a-m)^2 = a^2 - 2an + n^2 - a^2 + 2am - m^2
= -2an + 2am + n^2 - m^2
= -2a(n - m) + (n-m)(n+m)
= (n-m)(-2a+n+m) <0, >=0
-2a+n+m>0, <=0
n+m>2a, >=2a
l(a) =
⎧ (n-a)^2 (n+m>2a)
⎨
⎩ (m-a)^2 (n+m<=2a)
I = [a, b, c] (a<=b<=c)
# L is the loss function for the whole array
L(I) = (l(a) + l(b) + l(c))/3
n+m>2c => n+m>2b => n+m>2a
n+m>2c: L(I) = ((n-a)^2 + (n-b)^2 + (n-c)^2)/3
min_n: (a+b+c)/3


question 2: a 3-tuple, and 1 integer n